module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "21.0.7"

  # cluster_name    = local.cluster_name , it was changed to the following line.
  name    = local.cluster_name
  #cluster_version = var.eks_cluster_version, it was changed to the following line
  kubernetes_version = "1.33"
  
  # Optional
  endpoint_public_access = true
  #cluster_endpoint_public_access           = true
  #enable_cluster_creator_admin_permissions = true

  #cluster_addons = {
  #    aws-ebs-csi-driver = {
  #    service_account_role_arn = module.irsa-ebs-csi.iam_role_arn
  #  }
  #}

  addons = {
    coredns                = {}
    eks-pod-identity-agent = {
      before_compute = true
    }
    kube-proxy             = {}
    vpc-cni                = {
      before_compute = true
    }
  }

  # Optional: Adds the current caller identity as an administrator via cluster access entry
  enable_cluster_creator_admin_permissions = true
  
  vpc_id     = module.vpc.vpc_id
  subnet_ids = module.vpc.private_subnets  # use public subnet for production
  #control_plane_subnet_ids = ["subnet-xyzde987", "subnet-slkjf456", "subnet-qeiru789"]
  control_plane_subnet_ids = module.vpc.private_subnets
  node_security_group_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = null
  }
 
  # this was an outdated way to set the node group defaults, don't support it anymore.
  #eks_managed_node_group_defaults = {
  #  #ami_type = "AL2_x86_64"
  #  #ami_type = "AL2023_x86_64_STANDARD"
  #  ami_type = "BOTTLEROCKET_x86_64"
  #  attach_cluster_primary_security_group = true
  #  # Disabling and using externally provided security groups
  #  create_security_group = false
  #}

  # EKS Managed Node Group(s)
  # The following node groups are created with the EKS Managed Node Group feature
  eks_managed_node_groups = {
    one = {
      name = "node-group-1"
      # Starting on 1.30, AL2023 is the default AMI type for EKS managed node groups
      ami_type       = "AL2023_x86_64_STANDARD"
      #instance_types = ["t3.small"]
      instance_types = ["t2.medium"]

      min_size     = 1
      max_size     = 1
      desired_size = 1

      pre_bootstrap_user_data = <<-EOT
      echo 'foo bar'
      EOT

      vpc_security_group_ids = [
        aws_security_group.node_group_one.id
      ]
    }

    two = {
      name = "node-group-2"
      instance_types = ["t2.medium"]
      min_size     = 1
      max_size     = 1
      desired_size = 1
      pre_bootstrap_user_data = <<-EOT
      echo 'foo bar'
      EOT
      vpc_security_group_ids = [
        aws_security_group.node_group_two.id
      ]
    }
  }

  tags = {
    Environment = "dev"
    Terraform   = "true"
    CreatedBy  = "Terraform"
    CreatedOn  = formatdate("YYYY-MM-DD", timestamp())
  }
}


#module "karpenter" {
#  source = "terraform-aws-modules/eks/aws//modules/karpenter"
#  version = "21.0.7" # Use the appropriate version
#  cluster_name = module.eks.cluster_name
#
#  # Attach additional IAM policies to the Karpenter node IAM role
#  node_iam_role_additional_policies = {
#    AmazonSSMManagedInstanceCore = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
#  }
#
#  tags = {
#    Environment = "dev"
#    Terraform   = "true"
#  }
#}




# https://aws.amazon.com/blogs/containers/amazon-ebs-csi-driver-is-now-generally-available-in-amazon-eks-add-ons/ 
data "aws_iam_policy" "ebs_csi_policy" {
  arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
}

module "irsa-ebs-csi" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc"
  version = "5.39.0"

  create_role                   = true
  role_name                     = "AmazonEKSTFEBSCSIRole-${module.eks.cluster_name}"
  provider_url                  = module.eks.oidc_provider
  role_policy_arns              = [data.aws_iam_policy.ebs_csi_policy.arn]
  oidc_fully_qualified_subjects = ["system:serviceaccount:kube-system:ebs-csi-controller-sa"]
}
